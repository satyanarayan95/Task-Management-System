services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    env_file:
      - .env
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - ./shared:/app/shared
    environment:
      - VITE_API_URL=${VITE_API_URL:-http://localhost:5500/api}
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - task-management-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - .env
    ports:
      - "5500:5500"
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./shared:/shared
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - MONGODB_URI=${MONGODB_URI:-mongodb://mongodb:27017/taskmanagement}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - JWT_SECRET=${JWT_SECRET:-demo-jwt-secret-key-for-local-development}
      - PORT=${PORT:-5500}
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5500/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - task-management-network

  scheduler:
    build:
      context: ./scheduler
      dockerfile: Dockerfile
    env_file:
      - .env
    volumes:
      - ./scheduler:/app
      - /app/node_modules
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - MONGODB_URI=${MONGODB_URI:-mongodb://mongodb:27017/taskmanagement}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "pgrep", "-f", "node.*scheduler.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - task-management-network

  mongodb:
    image: mongo:7
    env_file:
      - .env
    ports:
      - "27018:27017"
    volumes:
      - mongodb_data:/data/db
    environment:
      - MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE:-taskmanagement}
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - task-management-network

  redis:
    image: redis:7-alpine
    env_file:
      - .env
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - task-management-network

networks:
  task-management-network:
    driver: bridge

volumes:
  mongodb_data:
  redis_data: